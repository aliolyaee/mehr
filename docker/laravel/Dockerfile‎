########### Stage 1: Build dependencies ###########
FROM composer:2.7 AS vendor

# ۱) پوشهٔ اپ در کانتینر
WORKDIR /app

# ۲) فقط فایل‌های composer را کپی کنیم که کش مؤثر باشد
COPY backend/composer.* ./
RUN composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

########### Stage 2: Assets (اختیاری اگر از Vite/Laravel Mix استفاده می‌کنید) ###########
FROM node:20-alpine AS assets
WORKDIR /app
# پکیج‌های JS
COPY backend/package*.json ./
RUN npm ci
COPY backend/ ./
RUN npm run build     # خروجی در backend/public/build یا resources/... بسته به تنظیم Vite

########### Stage 3: Runtime ###########
FROM php:8.3-fpm-alpine

# ۱) ابزارهای سیستمیِ لازم برای اکستنشن‌ها
RUN apk add --no-cache \
        bash curl icu-dev libxml2-dev oniguruma-dev \
        libpng libpng-dev libzip-dev freetype-dev jpeg-dev \
        # برای supervisor یا cron، هرچه لازم دارید اضافه کنید
        ;

# ۲) اکستنشن‌های PHP
RUN docker-php-ext-install \
        intl pdo_mysql mbstring exif pcntl bcmath opcache \
        zip gd

# ۳) تنظیمات OPCache (پرفورمنس Production)
RUN { \
      echo "opcache.enable=1"; \
      echo "opcache.preload=/app/bootstrap/cache/preload.php"; \
      echo "opcache.memory_consumption=128"; \
      echo "opcache.max_accelerated_files=10000"; \
    } > /usr/local/etc/php/conf.d/opcache.ini

# ۴) کد پروژه + vendor + assets
WORKDIR /app
COPY --from=vendor /app /app
# اگر خروجی Vite در public/build است:
COPY --from=assets /app/public/build ./public/build

# ۵) کش‌های Laravel
RUN php artisan config:cache \
 && php artisan route:cache  \
 && php artisan view:cache   \
 && rm -rf node_modules      # اگر به هر دلیلی کپی شده باشد

# ۶) دسترسی‌ها
RUN adduser -D -u 1000 www
RUN chown -R www:www /app
USER www

EXPOSE 9000
CMD ["php-fpm", "-y", "/usr/local/etc/php-fpm.conf", "-R"]
